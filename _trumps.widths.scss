/*------------------------------------*\
    #WIDTHS
\*------------------------------------*/

/**
 * A series of width helper classes that you can use to size things like grid
 * systems. Classes can take a fraction-like format (e.g. `.2/3`) or a spoken-
 * word format (e.g. `two-thirds`). Toggle formats by overriding the
 * `$inuit-use-fractions` variable defined below.
 */

$inuit-use-fractions: true !default;
$inuit-enable-widths--responsive: false !default;
$inuit-enable-widths--responsive-extra: false !default;
$inuit-widths: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 !default;
$inuit-namespace: null !default;

@mixin inuit-widths($prefix, $wholes...) {
  $inuit-width-map: () !default !global;
  $parts-map: (
    1:  One,
    2:  Two,
    3:  Three,
    4:  Four,
    5:  Five,
    6:  Six,
    7:  Seven,
    8:  Height,
    9:  Nine,
    10: Ten,
    11: Eleven
  );
  $wholes-map: (
    1:  Whole,
    2:  Half,
    3:  Third,
    4:  Quarter,
    5:  Fifths,
    6:  Sixths,
    7:  Seventh,
    8:  Eighths,
    9:  Ninths,
    10: Tenths,
    11: Eleventh,
    12: Twelfths
  );

  @each $whole in $wholes {
    $part: 1;

    /**
     * #{map-get($wholes-map, $whole) or $whole + th}.
     */

    @while $part < $whole or ($whole == $part and $part == 1) {
      $part-selector: #{$part};
      $separator-selector: "/";
      $whole-selector: #{$whole};
      $width: $part / $whole * 100 + "%";

      // One Whole
      @if $whole == 1 {
        $separator-selector: "-";
        $whole-selector: #{to-lower-case(map-get($wholes-map, $whole))};
      }

      // Use spoken-words & check if the corresponding word exists in $wholes-map.
      @if $inuit-use-fractions == false {
        @if map-get($wholes-map, $whole) != null and map-get($parts-map, $part) != null {
          $part-selector: #{to-lower-case(map-get($parts-map, $part))};
          $separator-selector: "-";
          $whole-selector: #{to-lower-case(map-get($wholes-map, $whole))};
        } @else {
          @warn $whole + " is an undefined spoken-word width in Inuit.css.";
        }
      }

      $selector: '[class~="#{$inuit-namespace}#{$prefix}#{$part-selector}#{$separator-selector}#{$whole-selector}"]';

      // First uses of a specific width.
      @if map-get($inuit-width-map, #{$inuit-namespace} + #{$prefix} + $width) == null {
        $inuit-width-map: map-merge($inuit-width-map,(#{$inuit-namespace} + #{$prefix} + $width: $selector)) !global;
        #{$selector} {
          width: #{$width} !important;
        }
      }

      // Extend a previous selector which has the same width property.
      @else {
        #{$selector} {
          @extend #{map-get($inuit-width-map, #{$inuit-namespace} + #{$prefix} + $width)};
        }
      }

      $part: $part + 1;
    }
  }
}

@include inuit-widths("", $inuit-widths...);

@if $inuit-enable-widths--responsive == true {
  @if mixin-exists(media-query) {

    @include media-query(palm) {
      @include inuit-widths("palm-", $inuit-widths...);
    }

    @include media-query(lap) {
      @include inuit-widths("lap-", $inuit-widths...);
    }

    @include media-query(lap-and-up) {
      @include inuit-widths("lap-and-up-", $inuit-widths...);
    }

    @include media-query(portable) {
      @include inuit-widths("portable-", $inuit-widths...);
    }

    @include media-query(desk) {
      @include inuit-widths("desk-", $inuit-widths...);
    }

    @if $inuit-enable-widths--responsive-extra == true {
      @include media-query(desk-wide) {
        @include inuit-widths("desk-wide-", $inuit-widths...);
      }
    }
  } @else {
    @warn "You set '$inuit-enable-widths--responsive' to 'true', but the 'media-query' mixin from Inuit.css is not available.";
  }
}